'use strict';

const arr = [1, 2, 3, 6, 8];

// methods

arr.pop(); // видаляє останній елемент з масиву (8 в нашому випадку)
arr.push(); // додає останній елемент до масиву (те, що в скобках буде вказано)

 // .length дозволяє побачити довжину масиву. Цикл закінчиться на останньому елементі
for (let i = 0; i < arr.length; i++) {
    console.log(arr[i]); //звертаємось до кожного елемента масиву [i]... [0],[1]..[8]
}

// метод for .. of (тільки для масивоподібних даних, з об'єктами не працює):
// 1) масив,
// 2) строка,
// 3) псевдомасив,
// 4) map,
// 5) set,
// 6) передбарти елементи зі сторінки.
// + можна використовувати break та continue.

for (let value of arr) { // value - змінна будь-якої назви. Вона покаже кожний елемент масиву arr
    console.log(value); // результат як і вище при вик. звичного цикла for
}

// метод .forEach() - приймає в себе функцію callback.
// Використовується у 90 %
arr.forEach(function (item, i, arr) {
    // item - довільна назва елементів в масиві, які будуть перебиратися
    // i - номер п\п (довільна назва)
    // arr - звертаємось до назви масиву
    console.log(`${i}: ${item} всередені масива ${arr}`);
    // 0: 1 всередені масива 1, 2, 3, 6, 8
    // 1: 2 всередені масива 1, 2, 3, 6, 8
    // 2: 3 всередені масива 1, 2, 3, 6, 8
    // 3: 6 всередені масива 1, 2, 3, 6, 8
    // 4: 8 всередені масива 1, 2, 3, 6, 8
});

// .map()
// .filter()
// .every/some()
// .reduse()

// строка - в масив .split()

const str = prompt('', '');
const products = str.split(s); // s-розділяє дані в строчці (може бути кома, крапка і т.д.)

// масив - в строку .join()

console.log(products.join('; ')); // ; - роздільник елементів у стрічці, який буде

// відсортувати .sort() - завжди сортує строки! за алфавітом за замовчуванням

products.sort(compareNum);

function compareNum(a, b) { // функція для сортування даних (чисел) вірно по порядку зростання для .sort()
    return a - b;
}